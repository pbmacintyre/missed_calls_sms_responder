<?php
/**
 * Copyright (C) 2019-2024 Paladin Business Solutions
 */

/* ======================== */
/* DB interaction functions */
/* ======================== */
function db_credentials () {
    require(__DIR__ . '/vendor/autoload.php');
    $dotenv = Dotenv\Dotenv::createImmutable(__DIR__)->load();

    $servername = $_ENV['DB_SERVER_NAME'];
    $username = $_ENV['DB_USER_NAME'];
    $password = $_ENV['DB_PWD'];
    $dbname = $_ENV['DB_NAME'];

    // Create connection
    return new PDO("pgsql:host=$servername;dbname=$dbname", $username, $password);
}

function db_record_insert ($table, $columns_data, $primary="") {
    /*
    Usage:
    $table = "table_name";
    $columns_data = array (
       "user_email" => "pbmacintyre@example.com",
       "firstname" => "Peter",
       "lastname" => "Johnston",   );
    $new_client_id = db_record_insert($table, $columns_data, "client_id");
    */

    $values = "";
    $conn = db_credentials();
    $sql = "INSERT INTO $table (";

    foreach ($columns_data as $key => $value) {
        $sql .= "$key, ";
        $values .= ":$key, ";
    }

    $length = strlen($sql);
    $sql = substr($sql, 0, $length - 2) . substr($sql, -1);

    $length = strlen($values);
    $values = substr($values, 0, $length - 2) . substr($values, -1);

    $sql .= ") VALUES (" . $values . ") RETURNING $primary";

    $stmt = $conn->prepare($sql);

    // Bind parameters
    foreach ($columns_data as $key => $value) {
        $stmt->bindParam(":$key", $columns_data["$key"]);
    }
    $stmt->execute();
	return $stmt->fetchColumn();
}

function db_record_select ($table, $columns_data, $where_info = "", $condition = "") {
    /*
    Usage:
    $table = "table_name";
    $columns_data = "*" => all fields OR
    $columns_data = array ("ringcentral_control_id", "webhook_token", );
    $where_info [not sent as parameter means no where clause]   OR
    $where_info = array ("ringcentral_control_id", 1);  OR
    $where_info = array ("from_number", "+18084652471", "webhook_token", "5", );
    $condition = "AND" or "OR"
    ONLY ALLOWS for ONE Conditional statement in the WHERE clause

    $db_result = db_record_select($table, $columns_data [, $where_info] [, $condition] );
    returns assoc array (or false):
    for 1 row returned:
       $fieldName = $db_result[0]['field_name'];
    for multiple rows returned:
       foreach ($db_result as $row) {
            echo_spaces("Record ID", $row['ringcentral_control_id']);
       }
    */
    $conn = db_credentials();
    $sql = "SELECT ";
    if ($columns_data == "*") {
        // get all fields
        $sql .= " * ";
    } else {
        foreach ($columns_data as $value) {
            $sql .= "$value, ";
        }
        $length = strlen($sql);
        // remove the trailing comma generated by the foreach loop
        $sql = substr($sql, 0, $length - 2) . substr($sql, -1);
    }
    $sql .= "FROM $table";
    if ($where_info) {
        $sql .= " WHERE $where_info[0] = '$where_info[1]'";
        if ($condition) {
            $sql .= " $condition $where_info[2] = '$where_info[3]'";
        }
    }
//    echo_spaces("SQL Text", $sql, 2);
    $stmt = $conn->prepare($sql);

    try {
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
    catch (Exception $e) {
        return "FALSE: " . $e->getMessage();
    }
}

function db_record_update ($table, $fields_data, $where_info = "", $condition = "") {
    /*
    Usage:
    $table = "clients";
    $where_info = array ("client_id", 1);  OR
    $where_info = array ("from_number", "+18084652471", "webhook_token", "5", );
    $condition = "AND" or "OR"
    ONLY ALLOWS for ONE Conditional statement in the WHERE clause
    $fields_data = array(
            "from_number" => $from_number,
			"to_number" => $to_number,
			"team_chat_id" => $chat_id,
            );
    db_record_update($table, $fields_data, $where_info, $condition) ;
    */
    $conn = db_credentials();

    $sql = "UPDATE $table SET ";
    foreach ($fields_data as $key => $value) {
        $sql .= "$key = :$key, ";
        $value_string["$key"] = $value;
    }
    $length = strlen($sql);
    $sql = substr($sql, 0, $length - 2) . substr($sql, -1);

    $sql .= " WHERE $where_info[0] = '$where_info[1]'";
    if ($condition) {
        $sql .= " $condition $where_info[2] = '$where_info[3]'";
    }

    $stmt = $conn->prepare($sql);
//    echo_spaces("SQL", $sql);
    foreach ($fields_data as $key => $value) {
        $stmt->bindParam(":$key", $fields_data["$key"]);
    }
    $stmt->execute();
}

